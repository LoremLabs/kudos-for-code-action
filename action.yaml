name: Kudos for Code
description: "Supporting your open source team..."

inputs:
  destination:
    description: "Where to save the generated kudos. Options: artifact, pool"
    default: pool
    required: true
  github-token:
    description: A GITHUB_TOKEN with custom permissions.
  search-dir:
    description: "Root directory containing package.json"
    default: "."
    required: true
  pool-id:
    description: "PoolId to save kudos to at external pool service."
    default: ""
  node-dev-dependencies:
    description: Identify contributors from devDependecies (Node.js)
    default: "true"
  identify-type:
    description: How should we identify Kudos? (sbom, setler)
    default: "sbom"
  identify-checks:
    description: Which methods should we use to identify the kudos? (kudos,contributors,lang)
    default: "kudos,contributors,lang"
  identify-langs:
    description: Which languages should we search for? (nodejs)
    default: "nodejs"
  setler-keys:
    # generate with `npx @loremlabs/setler wallet keys env --filter kudos`
    description: Setler Kudos Keys
    default: ""
  pool-storage-token:
    description: Pool Storage Token
    default: ""
  pool-endpoint:
    description: Pool Endpoint
    default: "https://api.semicolons.com"
  skip-main-package:
    description: Don't create kudos for main package.
    default: "false"
  generate-nomerges:
    description: Exclude merge commits during generating Kudos from repo.
    default: true
  generate-validemails:
    description: Include only valid emails during generating Kudos from repo.
    default: true
  generate-limitdepth:
    description: Limit of dependency depth during generating Kudos from repo.
    default: 2
  ink-validateResult:
    description: Validate the ink result from pool compared to the result from Kudos generation.
    default: true
  ink-chunkSize:
    description: Chunk size for ink request.
    default: 1000

runs:
  using: composite
  steps:
    - name: Set up action
      run: |
        echo "::group::Set up action"
        echo "KUDOS_DIR=$(mkdir -p ../.kudos && cd ../.kudos;pwd)" >> $GITHUB_ENV
        echo "::endgroup::"
      shell: bash

    - name: PNPM install
      if: contains(inputs.identify-type, 'setler')
      run: |
        echo "::group::Set up Required Tools"
        pnpm -C ${{ github.action_path }} install --no-optional
        pnpm --silent -C ${{ github.action_path }} build
        echo "${{ github.action_path }}/node_modules/.bin" >> $GITHUB_PATH
        echo "::endgroup::"
      shell: bash

    - name: Set up Required Tools
      if: contains(inputs.identify-type, 'sbom')
      run: |
        echo "::group::Set up Required Tools"
        wget https://github.com/LoremLabs/kudos-for-code/releases/download/v1.1.0/kudos-for-code-v1.1.0-linux-amd64.tar.gz
        tar -zxvf kudos-for-code-v1.1.0-linux-amd64.tar.gz
        echo "::endgroup::"

      shell: bash

    - name: Set up Kudos Tools
      run: |
        echo "::group::Set up Kudos tools"
        npx --yes @loremlabs/setler@latest echo version
        echo "::endgroup::"
      shell: bash

    - name: Set current cohort
      run: |
        echo "::group::Set current cohort"
        if [ -z "$USER_COHORT" ]; then
          echo "KUDOS_COHORT=$(date +'%Y%W')" >> $GITHUB_ENV
        else
          echo "KUDOS_COHORT=$USER_COHORT" >> $GITHUB_ENV
        fi
        echo "::endgroup::"
      env:
        USER_COHORT: ${{ inputs.cohort }}
      shell: bash

    - name: Set up Kudos Variables
      run: |
        echo "::group::Set up Kudos Variables"
        echo "KUDOS_OUTFILE=${{ env.KUDOS_DIR }}/${{ env.KUDOS_COHORT }}.ndjson" >> $GITHUB_ENV
        echo "::endgroup::"
      shell: bash

    - name: Check requirements
      if: contains(inputs.destination, 'pool')
      run: |
        echo "::group::Check requirements"

        if [ -z "${{ inputs.pool-id }}" ]; then
          echo "Missing input: pool-id"
          exit 1
        fi
        if [ -z "${{ inputs.setler-keys }}" ]; then
          echo "Missing input: setler-keys"
          exit 1
        fi
        if [ -z "${{ inputs.pool-storage-token }}" ]; then
          echo "Missing input: pool-storage-token"
          exit 1
        fi

        output=$(npx @loremlabs/setler@latest pool summary "${{ inputs.pool-id }}" 2>&1)

        # Check the exit status
        if [ $? -eq 1 ]; then
          echo "Command exited with status code 1 (error)."
          echo "Output of your_command:"
          echo "$output"
        else
          echo "Given pool-id is valid."
        fi

        echo "::endgroup::"
      shell: bash

    - name: Download last artifact
      if: contains(inputs.destination, 'artifact')
      # Not using actions/download-artifact as it doesn't let us specify the "source" of artifact.
      uses: dawidd6/action-download-artifact@v2
      with:
        name: kudos
        path: ${{ env.KUDOS_DIR }}
        branch: ${{ github.event.repository.default_branch }}
        workflow_conclusion: success
        event: push
        github_token: ${{ inputs.github-token || github.token }}
        if_no_artifact_found: warn

    - name: Identify Dependencies - ORT
      uses: oss-review-toolkit/ort-ci-github-action@v1
      with:
        image: ghcr.io/sangheestyle/ort:latest
        run: cache-dependencies, analyzer, upload-results

    - name: Identify Contributors and Ink Kudos via Pool - Kudos for Code
      if: contains(inputs.destination, 'pool')
      env:
        SETLER_KEYS_0: ${{ inputs.setler-keys }}
        KUDOS_STORAGE_TOKEN: ${{ inputs.pool-storage-token }}
      run: |
        echo "::group::Identify Contributors and Ink Kudos via Pool"

        ./kudos-for-code generate \
          --nomerges "${{ inputs.generate-nomerges }}" \
          --validemails "${{ inputs.generate-validemails }}" \
          --limitdepth "${{ inputs.generate-limitdepth }}" \
          --projectname ${{ github.event.repository.name }} \
          --inputfilepath ${{ env.ORT_RESULTS_ANALYZER_PATH }} \
        | ./kudos-for-code ink \
          --poolId "${{ inputs.pool-id }}" \
          --poolEndpoint "${{ inputs.pool-endpoint }}" \
          --validateResult ${{ inputs.ink-validateResult }}" \
          --chunkSize ${{ inputs.ink-chunkSize }}"

        echo "::endgroup::"
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      if: contains(inputs.destination, 'artifact')
      with:
        name: kudos
        path: ${{ env.KUDOS_DIR }}

branding:
  icon: users
  color: gray-dark
